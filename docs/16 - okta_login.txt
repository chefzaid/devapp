To integrate Okta authentication into a Spring Boot backend and an Angular frontend with a separate HTML login form for username and password, follow these steps:

### Step 1: Set Up Okta Application

1. **Sign up for an Okta Developer Account**: If you don't already have an Okta account, sign up at [developer.okta.com](https://developer.okta.com/).

2. **Create a New Application**:
    - Log in to your Okta account.
    - Navigate to the **Applications** section.
    - Click on **Create App Integration**.
    - Select **OIDC - OpenID Connect** and **Single Page Application (SPA)**.
    - Click **Next**.

3. **Configure Application Settings**:
    - **App integration name**: Give your app a name (e.g., `Angular App`).
    - **Sign-in redirect URIs**: Add `http://localhost:4200/login/callback` as a redirect URI.
    - **Sign-out redirect URIs**: Add `http://localhost:4200` as a sign-out URI.
    - Click **Save** to create the application.

4. **Retrieve Client Credentials**:
    - After creating the application, you will see a **Client ID**. Save this for use in your Angular application.
    - Note the **Issuer URI** as well (e.g., `https://dev-123456.okta.com/oauth2/default`).

### Step 2: Spring Boot Backend Setup

#### Dependencies

Add the necessary dependencies for OAuth 2.0 and Spring Security in your `pom.xml`:

```xml
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```

#### Configuration

Add Okta-related configurations to your `application.properties`:

```properties
spring.security.oauth2.resourceserver.jwt.issuer-uri=https://<your-okta-domain>/oauth2/default
```

Replace `<your-okta-domain>` with the values from your Okta application setup.

#### Security Configuration

Create a security configuration class to set up the resource server:

**SecurityConfig.java:**

```java
import org.springframework.context.annotation.Bean;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;
import org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter;

@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
                .antMatchers("/", "/index.html", "/public/**").permitAll()
                .anyRequest().authenticated()
                .and()
            .oauth2ResourceServer()
                .jwt();
    }

    @Bean
    public JwtAuthenticationConverter jwtAuthenticationConverter() {
        JwtGrantedAuthoritiesConverter grantedAuthoritiesConverter = new JwtGrantedAuthoritiesConverter();
        grantedAuthoritiesConverter.setAuthorityPrefix("ROLE_");
        grantedAuthoritiesConverter.setAuthoritiesClaimName("groups");

        JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();
        jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(grantedAuthoritiesConverter);
        return jwtAuthenticationConverter;
    }
}
```

### Step 3: Angular Frontend Setup

#### Install Angular CLI

If you haven't already, install the Angular CLI:

```sh
npm install -g @angular/cli
```

#### Create a New Angular Application

Create a new Angular application:

```sh
ng new okta-angular-app
cd okta-angular-app
```

#### Install Okta SDK

Install the Okta Angular SDK:

```sh
npm install @okta/okta-angular @okta/okta-auth-js
```

#### Configuration

Create a configuration file for Okta (`src/app/auth.config.ts`):

**auth.config.ts:**

```typescript
export const oktaConfig = {
  clientId: '<your-client-id>',
  issuer: 'https://<your-okta-domain>/oauth2/default',
  redirectUri: 'http://localhost:4200/login/callback',
  scopes: ['openid', 'profile', 'email'],
  pkce: true
};
```

Replace `<your-client-id>` and `<your-okta-domain>` with the values from your Okta application setup.

#### Module Configuration

Update the `AppModule` to configure Okta:

**app.module.ts:**

```typescript
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { OKTA_CONFIG, OktaAuthModule } from '@okta/okta-angular';
import { oktaConfig } from './auth.config';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { AuthInterceptor } from './auth.interceptor';
import { HomeComponent } from './home/home.component';
import { OrdersComponent } from './orders/orders.component';
import { LoginComponent } from './login/login.component';

@NgModule({
  declarations: [
    AppComponent,
    HomeComponent,
    OrdersComponent,
    LoginComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    OktaAuthModule,
    HttpClientModule
  ],
  providers: [
    { provide: OKTA_CONFIG, useValue: oktaConfig },
    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }
  ],
  bootstrap: [AppComponent]
})
export class AppModule { }
```

#### Auth Interceptor

Create an HTTP interceptor to add the Authorization header to API requests:

**auth.interceptor.ts:**

```typescript
import { Injectable } from '@angular/core';
import { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';
import { Observable } from 'rxjs';
import { OktaAuthService } from '@okta/okta-angular';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {

  constructor(private oktaAuth: OktaAuthService) {}

  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    return this.oktaAuth.getAccessToken().then(token => {
      const clonedReq = req.clone({
        headers: req.headers.set('Authorization', 'Bearer ' + token)
      });
      return next.handle(clonedReq).toPromise();
    });
  }
}
```

#### Routing Configuration

Configure routing to handle the login callback:

**app-routing.module.ts:**

```typescript
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { OktaCallbackComponent, OktaAuthGuard } from '@okta/okta-angular';
import { HomeComponent } from './home/home.component';
import { OrdersComponent } from './orders/orders.component';
import { LoginComponent } from './login/login.component';

const routes: Routes = [
  { path: '', component: HomeComponent },
  { path: 'login/callback', component: OktaCallbackComponent },
  { path: 'login', component: LoginComponent },
  { path: 'orders', component: OrdersComponent, canActivate: [OktaAuthGuard] }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
```

#### Components

Create components for the home page, orders page, and login page.

**home.component.ts:**

```typescript
import { Component } from '@angular/core';
import { OktaAuthService } from '@okta/okta-angular';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html'
})
export class HomeComponent {
  constructor(public oktaAuth: OktaAuthService) {}

  async login() {
    await this.oktaAuth.signInWithRedirect();
  }

  async logout() {
    await this.oktaAuth.signOut();
  }
}
```

**home.component.html:**

```html
<h1>Welcome to the Angular App</h1>
<button *ngIf="!oktaAuth.isAuthenticated()" (click)="login()">Login</button>
<button *ngIf="oktaAuth.isAuthenticated()" (click)="logout()">Logout</button>
```

**orders.component.ts:**

```typescript
import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-orders',
  templateUrl: './orders.component.html'
})
export class OrdersComponent implements OnInit {
  orders: any[] = [];

  constructor(private http: HttpClient) {}

  ngOnInit() {
    this.http.get('/api/orders').subscribe(data => {
      this.orders = data as any[];
    });
  }
}
```

**orders.component.html:**

```html
<h1>Orders</h1>
<ul>
  <li *ngFor="let order of orders">{{ order.name }}</li>
</ul>
```

**login.component.ts:**

```typescript
import { Component } from '@angular/core';
import { OktaAuthService } from '@okta/okta-angular';
import { Router } from '@angular/router';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html'
})
export class LoginComponent {
  username: string;
  password: string;
  errorMessage: string;

  constructor(private oktaAuth: OktaAuthService, private router: Router) {}

  async login() {
    try {
      const transaction = await this.okta

Auth.signInWithCredentials({
        username: this.username,
        password: this.password
      });
      if (transaction.status === 'SUCCESS') {
        this.oktaAuth.token.getWithRedirect({
          sessionToken: transaction.sessionToken
        });
      } else {
        throw new Error('Login failed');
      }
    } catch (err) {
      this.errorMessage = err.message;
    }
  }
}
```

**login.component.html:**

```html
<h1>Login</h1>
<form (ngSubmit)="login()">
  <div>
    <label for="username">Username:</label>
    <input type="text" id="username" [(ngModel)]="username" name="username" required>
  </div>
  <div>
    <label for="password">Password:</label>
    <input type="password" id="password" [(ngModel)]="password" name="password" required>
  </div>
  <button type="submit">Login</button>
  <div *ngIf="errorMessage">{{ errorMessage }}</div>
</form>
```

### Step 4: Run the Angular Application

Run the Angular application:

```sh
ng serve
```

Open your browser and navigate to `http://localhost:4200`. You should be able to log in with Okta using the username/password form and access the protected orders page.

### Summary

1. **Set up an Okta application** to use as your OAuth 2.0 provider.
2. **Configure the Spring Boot backend** to use Okta for authentication.
3. **Set up the Angular frontend** to handle Okta authentication.
4. **Add an HTTP interceptor** to attach the access token to API requests.
5. **Create components** to handle login, logout, and display data.
6. **Separate HTML templates** for each component.

This setup ensures secure authentication using Okta and integrates it seamlessly into your Spring Boot backend and Angular frontend application, allowing users to log in with a username/password form and access protected resources.