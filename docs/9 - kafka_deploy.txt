To deploy Kafka using Kubernetes, we need to create Kubernetes manifests for Zookeeper and Kafka. We'll also set up services to expose these components.

### Step 1: Zookeeper Deployment

Create a Zookeeper deployment and service.

**zookeeper-deployment.yaml:**

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: wurstmeister/zookeeper:3.4.6
        ports:
        - containerPort: 2181
        env:
        - name: ZOO_MY_ID
          value: "1"
        - name: ZOO_SERVERS
          value: "server.1=zookeeper:2888:3888"
```

**zookeeper-service.yaml:**

```yaml
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
spec:
  ports:
  - port: 2181
    targetPort: 2181
  selector:
    app: zookeeper
  clusterIP: None
```

### Step 2: Kafka Deployment

Create a Kafka deployment and service.

**kafka-deployment.yaml:**

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka
        image: wurstmeister/kafka:latest
        ports:
        - containerPort: 9092
        env:
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper:2181"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://kafka:9092"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "PLAINTEXT:PLAINTEXT"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
```

**kafka-service.yaml:**

```yaml
apiVersion: v1
kind: Service
metadata:
  name: kafka
spec:
  ports:
  - port: 9092
    targetPort: 9092
  selector:
    app: kafka
  clusterIP: None
```

### Step 3: Deploy to Kubernetes

Apply the Kubernetes manifests to your cluster.

```sh
kubectl apply -f zookeeper-deployment.yaml
kubectl apply -f zookeeper-service.yaml
kubectl apply -f kafka-deployment.yaml
kubectl apply -f kafka-service.yaml
```

### Step 4: Verify Deployment

Ensure that the pods are running correctly.

```sh
kubectl get pods
kubectl get services
```

### Step 5: Update Your Services to Use Kafka

Make sure your Spring Boot services are configured to use the Kafka service running on Kubernetes. You should update your `application.properties` files to point to the Kafka service.

For example:

**application.properties (Order and User services):**

```properties
spring.kafka.bootstrap-servers=kafka:9092
spring.kafka.consumer.group-id=group_id
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
```

### Conclusion

With these steps, you have set up Kafka and Zookeeper on Kubernetes and configured your Spring Boot microservices to communicate with Kafka. This setup provides a scalable and robust way to manage inter-service communication in a microservices architecture using Kubernetes.